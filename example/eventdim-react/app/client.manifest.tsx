/*------------------------------------------
 * Generated by htmx-router                *
 * Warn: Any changes will be overwritten   *
-------------------------------------------*/
/* eslint-disable @typescript-eslint/no-explicit-any */

const client = {
	ThemeSwitcher: async (element: HTMLElement, props: any) => {
		const C = (await import("~/component/client/theme-switcher")).ThemeSwitcher;
		const d = await import("react-dom/client");
		const r = d.createRoot(element);
		r.render(<C {...props} />);
		mounted.set(element, r);
	},
	Authenticate: async (element: HTMLElement, props: any) => {
		const C = (await import("~/component/client/authenticate")).Authenticate;
		const d = await import("react-dom/client");
		const r = d.createRoot(element);
		r.render(<C {...props} />);
		mounted.set(element, r);
	},
}
export default client;
(window as any).CLIENT = client;


import type { Root } from "react-dom/client";
const mounted = new Map<HTMLElement, Root>();
function Unmount(node: HTMLElement, root: Root) {
	mounted.delete(node);
	root.unmount();
}

const observer = new MutationObserver((mutations) => {
	for (const mut of mutations) {
		for (const node of mut.removedNodes) CleanNode(node);
	}
});
observer.observe(document.body, { childList: true, subtree: true });

function CleanNode(node: Node) {
	if (node instanceof HTMLElement) {
		const root = mounted.get(node);
		if (root) {
			console.info("unmounting", node);
			Unmount(node, root);
		}
	}

	for (const child of node.childNodes) CleanNode(child);
}