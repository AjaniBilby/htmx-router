enum UserStatus {
	LOGGED_OUT
	LOGGED_IN
}

enum Colors {
	red
	rose
	orange
	green
	blue
	yellow
	violet
}

model User {
	id Int @id @default(autoincrement())

	status UserStatus @default(LOGGED_OUT)
	color  Colors

	display String @db.VarChar(50)
	name String @db.VarChar(20) @unique // username

	createdAt DateTime @default(now())
	updatedAt DateTime @default(now()) @updatedAt

	passkeys PassKey[]
	sessions UserSession[]
	password UserPassword?

	authoredEvents  Event[] @relation("EventAuthor")
	attendingEvents Event[]
}

model UserSession {
	// A session token is a random 50 bytes buffer
	prefix Int    @id               // first 4 bytes
	key    String @db.VarChar(100)  // remaining bytes hashed

	// Ensure if this token is stolen it can't be used on another IP
	ip String @db.Inet() @default("0.0.0.0")

	user User @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
	userID Int
	@@index([userID]) // faster lookups for a user's sessions

	expiry DateTime

	createdAt DateTime @default(now())
	updatedAt DateTime @default(now()) @updatedAt
}


// Authentication details are stored in a separate table so they can't accidentally be loaded an leaked via a SELECT *
model UserPassword {
	user   User @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
	userID Int @id

	password String @db.VarChar(100) // Hashed
}

model PassKey {
	id Int @id @default(autoincrement())

	user User @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)
	userID Int

	name String @db.VarChar(50)
	@@unique([name, userID])


	credentialID String @unique
	publicKey    String

	createdAt DateTime @default(now())
	updatedAt DateTime @default(now()) @updatedAt

	@@index([userID])
}
